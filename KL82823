local Players = game:GetService("Players")
local TeleportService = game:GetService("TeleportService")
local HttpService = game:GetService("HttpService")
local RunService = game:GetService("RunService")

getgenv().AutoKillEnabled = true
getgenv().DebugMode = false
getgenv().SERVER_HOP_INTERVAL = 40

local LocalPlayer = Players.LocalPlayer
local placeId = game.PlaceId
local hopping = false
local lastAction = tick()

local excludedNames = {
    ["Nii_OZ"] = true,
    ["VTBR_VoaPassarinho8"] = true,
}

local function log(message)
    if DebugMode then
        print("ðŸ”¹ " .. os.date("[%H:%M:%S] ") .. message)
    end
end

local function hopServer()
    if hopping then return end
    hopping = true

    local success, err = pcall(function()
        local serverId
        local cursor
        repeat
            local url = "https://games.roblox.com/v1/games/" .. placeId .. "/servers/Public?sortOrder=Desc&limit=100"
            if cursor then url = url .. "&cursor=" .. cursor end

            local apiSuccess, response = pcall(function()
                return HttpService:JSONDecode(game:HttpGet(url))
            end)

            if apiSuccess and response and response.data then
                for _, server in ipairs(response.data) do
                    if server.id ~= game.JobId and server.playing < server.maxPlayers then
                        serverId = server.id
                        break
                    end
                end
                cursor = response.nextPageCursor
            end
        until serverId or not cursor

        if serverId then
            log("Tentando teleportar para o servidor: " .. serverId)
            TeleportService:TeleportToPlaceInstance(placeId, serverId, LocalPlayer)
        else
            log("Nenhum servidor adequado encontrado, tentando novamente...")
        end
    end)

    if not success then
        log("Erro durante o server hop: " .. tostring(err))
    end

    hopping = false
end

local function autoAttack()
    if not AutoKillEnabled then return end

    local hand = LocalPlayer.Character and (LocalPlayer.Character:FindFirstChild("RightHand") or LocalPlayer.Character:FindFirstChild("Right Arm"))
    if not hand then return end

    for _, target in ipairs(Players:GetPlayers()) do
        if target ~= LocalPlayer and not excludedNames[target.Name] and target.Character then
            local humanoid = target.Character:FindFirstChildOfClass("Humanoid")
            local root = target.Character:FindFirstChild("HumanoidRootPart")

            if humanoid and humanoid.Health > 0 and root then
                pcall(function()
                    firetouchinterest(hand, root, 0)
                    task.wait(0.05)
                    firetouchinterest(hand, root, 1)
                end)
            end
        end
    end
end

local function autoEquip()
    while task.wait(0.2) and AutoKillEnabled do
        pcall(function()
            local char = LocalPlayer.Character
            if not char then return end

            local egg = LocalPlayer.Backpack:FindFirstChild("Protein Egg")
            if egg then
                egg.Parent = char
            end

            local punch = LocalPlayer.Backpack:FindFirstChild("Punch") or char:FindFirstChild("Punch")
            if punch then
                if punch.Parent ~= char then
                    punch.Parent = char
                end
                punch:Activate()
            end
        end)
    end
end

task.spawn(function()
    while task.wait(SERVER_HOP_INTERVAL) and AutoKillEnabled do
        local success, err = pcall(hopServer)
        if not success then
            log("Erro no agendamento do server hop: " .. tostring(err))
        end
    end
end)

task.spawn(function()
    while task.wait(0.1) and AutoKillEnabled do
        pcall(autoAttack)
    end
end)

task.spawn(autoEquip)

RunService.Heartbeat:Connect(function()
    lastAction = tick()
end)

LocalPlayer.OnTeleport:Connect(function(status)
    if status == Enum.TeleportState.Failed then
        log("Teleporte falhou, tentando novamente...")
        task.wait(5) -- Espera um pouco antes de tentar novamente
        hopServer()
    end
end)
