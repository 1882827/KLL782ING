local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local TeleportService = game:GetService("TeleportService")
local HttpService = game:GetService("HttpService")
local Lighting = game:GetService("Lighting")
local RunService = game:GetService("RunService")

local placeId = game.PlaceId
local ServerHopCooldown = false
local MIN_PLAYERS = 10
local excludedNames = {
    ["Nii_OZ"] = false,
    ["VTBR_VoaPassarinho8"] = false,
}

local visitedServers = {}
visitedServers[game.JobId] = true

local function findBestServer(minOccupancy)
    local cursor = nil
    local bestServer = nil
    repeat
        local url = string.format(
            "https://games.roblox.com/v1/games/%d/servers/Public?sortOrder=Desc&limit=100%s",
            placeId,
            cursor and "&cursor=" .. cursor or ""
        )
        local success, result = pcall(function()
            return HttpService:JSONDecode(game:HttpGet(url))
        end)

        if success and result and result.data then
            for _, server in ipairs(result.data) do
                if not visitedServers[server.id] and server.playing < server.maxPlayers then
                    if server.playing >= MIN_PLAYERS then
                        local occupancy = server.playing / server.maxPlayers
                        if occupancy >= (minOccupancy or 0) then
                            if not bestServer or server.playing > bestServer.playing then
                                bestServer = server
                            end
                        end
                    end
                end
            end
            cursor = result.nextPageCursor
        else
            break
        end
    until not cursor
    return bestServer and bestServer.id or nil
end

local function hopToServer(mode)
    if ServerHopCooldown then return end
    ServerHopCooldown = true

    task.spawn(function()
        local delayTime = 3
        while true do
            local minOcc = mode == "death" and 0.8 or 0
            local targetServer = findBestServer(minOcc)

            if not targetServer then
                ServerHopCooldown = false
                task.wait(2)
                return
            end

            visitedServers[targetServer] = true

            local success = pcall(function()
                TeleportService:TeleportToPlaceInstance(placeId, targetServer, LocalPlayer)
            end)

            if success then
                break
            else
                task.wait(delayTime)
                delayTime = math.min(delayTime * 2, 60)
            end
        end
        ServerHopCooldown = false
    end)
end

local function waitForStats()
    repeat task.wait() until LocalPlayer:FindFirstChild("Durability")
    repeat task.wait() until LocalPlayer:FindFirstChild("leaderstats")
end
waitForStats()

local function setupDiedListener(character)
    local hum = character:FindFirstChildOfClass("Humanoid")
    if hum then
        hum.Died:Connect(function()
            hopToServer("death")
        end)
    end
end
if LocalPlayer.Character then setupDiedListener(LocalPlayer.Character) end
LocalPlayer.CharacterAdded:Connect(setupDiedListener)

RunService.Heartbeat:Connect(function()
    local hum = LocalPlayer.Character and LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
    if hum and hum.Health < hum.MaxHealth then
        hum.Health = hum.MaxHealth
    end
end)

task.spawn(function()
    while true do
        task.wait()
        local char = LocalPlayer.Character
        local Backpack = LocalPlayer:FindFirstChild("Backpack")
        local hum = char and char:FindFirstChildOfClass("Humanoid")
        local tool = (char and char:FindFirstChild("Punch")) or (Backpack and Backpack:FindFirstChild("Punch"))
        if hum and tool then
            if tool.Parent ~= char then
                hum:EquipTool(tool)
                task.wait(0.05)
            end
            pcall(function()
                tool:Activate()
                task.wait(0.2)
            end)
        end
    end
end)

task.spawn(function()
    while true do
        task.wait(1)
        local char = LocalPlayer.Character
        local durability = LocalPlayer:FindFirstChild("Durability") and LocalPlayer.Durability.Value
        local root = char and char:FindFirstChild("HumanoidRootPart")
        if not (durability and root) then continue end
        for _, player in ipairs(Players:GetPlayers()) do
            if player ~= LocalPlayer and not excludedNames[player.DisplayName] then
                local stats = player:FindFirstChild("leaderstats")
                local strength = stats and stats:FindFirstChild("Strength") and stats.Strength.Value
                local tChar = player.Character
                local tRoot = tChar and tChar:FindFirstChild("HumanoidRootPart")
                if strength and tRoot and strength < durability * 6.5 and tRoot.Anchored == false then
                    tRoot.CFrame = root.CFrame * CFrame.new(math.random(-5, 5), 0, math.random(-5, 5))
                    task.wait(0.1)
                end
            end
        end
    end
end)

task.spawn(function()
    for _, gui in pairs(LocalPlayer:WaitForChild("PlayerGui"):GetChildren()) do
        if gui:IsA("ScreenGui") then gui:Destroy() end
    end
    for _, v in pairs(Lighting:GetChildren()) do
        if v:IsA("Sky") then v:Destroy() end
    end
    local darkSky = Instance.new("Sky")
    darkSky.Name = "DarkSky"
    for _, face in ipairs({"Bk", "Dn", "Ft", "Lf", "Rt", "Up"}) do
        darkSky["Skybox"..face] = "rbxassetid://0"
    end
    darkSky.Parent = Lighting
    local function applyDark()
        Lighting.Brightness = 0
        Lighting.ClockTime = 0
        Lighting.TimeOfDay = "00:00:00"
        Lighting.OutdoorAmbient = Color3.new(0, 0, 0)
        Lighting.Ambient = Color3.new(0, 0, 0)
        Lighting.FogColor = Color3.new(0, 0, 0)
        Lighting.FogEnd = 100
    end
    applyDark()
    task.spawn(function()
        while true do
            task.wait(5)
            if not Lighting:FindFirstChild("DarkSky") then darkSky:Clone().Parent = Lighting end
            applyDark()
        end
    end)
    for _, obj in pairs(workspace:GetDescendants()) do
        if obj:IsA("ParticleEmitter") or obj:IsA("PointLight") or obj:IsA("SpotLight") or obj:IsA("SurfaceLight") then
            obj:Destroy()
        end
    end
end)

task.spawn(function()
    while true do
        task.wait(5)
        if #Players:GetPlayers() < MIN_PLAYERS then
            hopToServer("lowplayers")
        end
    end
end)

task.spawn(function()
    while true do
        task.wait(2)
        for _, p in ipairs(Players:GetPlayers()) do
            if p ~= LocalPlayer and excludedNames[p.DisplayName] == false then
                hopToServer("enemy")
            end
        end
    end
end)

task.delay(45, function()
    hopToServer("initial")
end)
