local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local TeleportService = game:GetService("TeleportService")
local HttpService = game:GetService("HttpService")

local excludedNames = {
    ["SadNii4"] = true,
    ["82iwkwjw3"] = true,
    ["EternaIKing_ofc"] = true,
    ["EternalQueen_ofc"] = true,
    ["OfEternal_king"] = true,
    ["OfEternal_queen"] = true,
    ["PROPLAYER292827"] = true,
    ["ilvieharbor73"] = true,
    ["TOQUIO_94"] = true,
    ["TOQUIO_944"] = true,
    ["ARMY_S0LDIER8"] = true,
    ["dorrido13"] = true,
    ["PEBUGADOTUTORIAL"] = true,
    ["TheLittle8Prince"] = true,
    ["Italo444hzx"] = true,
    ["NOOB_SEUPESADELO"] = true,
    ["Voa_Passarinho8"] = true,
    ["SadNii0"] = true,
    ["NeezXIX"] = true,
    ["Nicke_Nii"] = true,
    ["Kansas_Girl8"] = true,
}

local placeId = game.PlaceId

local function find18Or19PlayerServer()
    local cursor = nil
    repeat
        local url = "https://games.roblox.com/v1/games/"..placeId.."/servers/Public?sortOrder=Desc&limit=100"
        if cursor then
            url = url.."&cursor="..cursor
        end
        local success, response = pcall(function()
            return HttpService:JSONDecode(game:HttpGet(url))
        end)
        if success and response and response.data then
            for _, server in ipairs(response.data) do
                if (server.playing == 18) and server.maxPlayers == 20 and server.id ~= game.JobId then
                    return server.id
                end
            end
            cursor = response.nextPageCursor
        else
            break
        end
    until not cursor
    return nil
end

local function hopToServer()
    local serverId = find18Or19PlayerServer()
    if serverId then
        TeleportService:TeleportToPlaceInstance(placeId, serverId, LocalPlayer)
    else
        warn("No 18 or 19-player servers found! Retrying in 5 seconds...")
        task.delay(1, hopToServer)
    end
end

task.delay(48, hopToServer)

local function setupDiedListener(character)
    local hum = character:FindFirstChildOfClass("Humanoid")
    if hum then
        hum.Died:Connect(function()
            hopToServer()
        end)
    else
        character.ChildAdded:Connect(function(child)
            if child:IsA("Humanoid") then
                child.Died:Connect(function()
                    hopToServer()
                end)
            end
        end)
    end
end

if LocalPlayer.Character then
    setupDiedListener(LocalPlayer.Character)
end

LocalPlayer.CharacterAdded:Connect(setupDiedListener)

task.spawn(function()
    while true do
        task.wait(2)
        for _, player in ipairs(Players:GetPlayers()) do
            if player ~= LocalPlayer and player.DisplayName == "U3RT_SOVIETxKILLA" then
                hopToServer()
                return
            end
        end
    end
end)

task.spawn(function()
    while true do
        task.wait(0.3)
        local char = LocalPlayer.Character
        local hum = char and char:FindFirstChildOfClass("Humanoid")
        if hum then
            hum.Health = hum.MaxHealth
        end
    end
end)

task.spawn(function()
    while true do
        task.wait(0.3)
        local root = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
        local myDurability = LocalPlayer:FindFirstChild("Durability") and LocalPlayer.Durability.Value
        if root and myDurability then
            for _, player in ipairs(Players:GetPlayers()) do
                if player ~= LocalPlayer 
                    and not excludedNames[player.DisplayName]
                    and player.Character 
                    and player.Character:FindFirstChild("HumanoidRootPart") then
                    local stats = player:FindFirstChild("leaderstats")
                    local strength = stats and stats:FindFirstChild("Strength") and stats.Strength.Value
                    if strength and strength < myDurability * 6.5 then
                        local targetRoot = player.Character.HumanoidRootPart
                        targetRoot.CFrame = root.CFrame * CFrame.new(math.random(-5,5), 0, math.random(-5,5))
                    end
                end
            end
        end
    end
end)

task.spawn(function()
    while true do
        task.wait(0.1)
        local Backpack = LocalPlayer:WaitForChild("Backpack")
        local tool = Backpack:FindFirstChild("Punch")
        if tool and LocalPlayer.Character then
            local humanoid = LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
            if humanoid and tool.Parent ~= LocalPlayer.Character then
                humanoid:EquipTool(tool)
            end
        end
    end
end)

task.spawn(function()
    local Backpack = LocalPlayer:WaitForChild("Backpack")
    local tool = Backpack:WaitForChild("Punch")
    repeat task.wait() until LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid")
    local humanoid = LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
    humanoid:EquipTool(tool)
    while true do
        task.wait(0.1)
        if tool and tool.Parent == LocalPlayer.Character then
            tool:Activate()
        end
    end
end)

task.spawn(function()
    while true do
        task.wait(0.03)
        local char = LocalPlayer.Character
        local root = char and char:FindFirstChild("HumanoidRootPart")
        if root then
            root.CFrame = root.CFrame * CFrame.Angles(0, math.rad(15), 0)
        end
    end
end)

task.spawn(function()
    local Lighting = game:GetService("Lighting")
    local Terrain = workspace:FindFirstChildOfClass("Terrain")
    local Players = game:GetService("Players")
    local StarterGui = game:GetService("StarterGui")
    local UserSettings = pcall(function() return UserSettings():GetService("UserGameSettings") end)

    if UserSettings and typeof(UserSettings) == "Instance" then
        pcall(function()
            UserSettings.SavedQualityLevel = Enum.SavedQualitySetting.QualityLevel1
        end)
    end

    Lighting.GlobalShadows = false
    Lighting.FogEnd = 1000000
    Lighting.Brightness = 0
    Lighting.EnvironmentDiffuseScale = 0
    Lighting.EnvironmentSpecularScale = 0

    for _, v in pairs(Lighting:GetChildren()) do
        if v:IsA("PostEffect") then
            v.Enabled = false
        end
    end

    local function removeVisuals(obj)
        for _, child in pairs(obj:GetDescendants()) do
            if child:IsA("Decal") or child:IsA("Texture") or child:IsA("ParticleEmitter") or child:IsA("Fire") or child:IsA("Smoke") or child:IsA("Sparkles") or child:IsA("Trail") or child:IsA("Beam") then
                child:Destroy()
            elseif child:IsA("BasePart") then
                child.Material = Enum.Material.SmoothPlastic
                child.Reflectance = 0
            end
        end
    end

    removeVisuals(workspace)

    for _, sound in pairs(workspace:GetDescendants()) do
        if sound:IsA("Sound") then
            sound.Volume = 0
        end
    end

    if Terrain then
        Terrain.WaterWaveSize = 0
        Terrain.WaterWaveSpeed = 0
        Terrain.WaterReflectance = 0
        Terrain.WaterTransparency = 1
    end

    for _, player in pairs(Players:GetPlayers()) do
        local char = player.Character
        if char then
            removeVisuals(char)
        end
    end

    Players.PlayerAdded:Connect(function(player)
        player.CharacterAdded:Connect(function(char)
            task.wait(1)
            removeVisuals(char)
        end)
    end)

    workspace.DescendantAdded:Connect(function(obj)
        task.delay(1, function()
            if obj and obj.Parent then
                pcall(function()
                    removeVisuals(obj)
                end)
            end
        end)
    end)

    StarterGui:SetCoreGuiEnabled(Enum.CoreGuiType.All, false)
end)
